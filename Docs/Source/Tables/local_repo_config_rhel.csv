Parameter,Mandatory/Optional,Details
**pulp_protocol**,Mandatory,"* **Type**: Boolean
* By default, set to ``false`` to enable secure (HTTP) connection to the Pulp server.
* Set to ``true`` if you want to connect to the Pulp server using HTTPS."
**user_repo_url_x86_64**,Optional,"* **Type**: JSON list
* This variable accepts the x86_64 repository urls  from which the software packages/images will be downloaded and accessed by the cluster.
* Omnia downloads the software packages from the given list of URLs and stores them into a local Pulp container. These packages are then accessed by the cluster nodes from that Pulp container.
* ``url`` defines the baseurl for the repository.
* ``gpgkey`` defines gpgkey for the repository. If ``gpgkey`` is omitted then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the software ``.rpm`` package.
* If you are using SSL certificates for encryption, include the ``sslcacert``, ``sslclientkey``, and ``sslclientcert`` fields, and ensure each is populated with the correct certificate or key data. Omit these fields entirely if SSL is not in use.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set policies (``always``, ``partial``, ``never``) for each user repository individually. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.

* **Example**: ``- { url: ""https://download.docker.com/linux/centos/9/x86_64/stable"", gpgkey: ""https://download.docker.com/linux/centos/gpg"", name: ""docker-ce-repo"", sslcacert: """", sslclientkey: """", sslclientcert: """", policy: """" }``

.. note:: All SSL related certificates must be kept in ``/opt/omnia/user-repo-certs/<user_repo_name>``. The certificate files are encrypted post ``local_repo.yml`` playbook execution. Execute the ``ansible-vault decrypt <certificate_file> --vault-password-file /opt/omnia/input/project_default/.local_repo_credentials_key`` command to decrypt the files. "
**user_repo_url_aarch64**,Optional,"* **Type**: JSON list
* This variable accepts the aarch64 repository urls from which the software packages/images will be downloaded and accessed by the cluster.
* Omnia downloads the software packages from the given list of URLs and stores them into a local Pulp container. These packages are then accessed by the cluster nodes from that Pulp container.
* ``url`` defines the baseurl for the repository.
* ``gpgkey`` defines gpgkey for the repository. If ``gpgkey`` is omitted then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the software ``.rpm`` package.
* If you are using SSL certificates for encryption, include the ``sslcacert``, ``sslclientkey``, and ``sslclientcert`` fields, and ensure each is populated with the correct certificate or key data. Omit these fields entirely if SSL is not in use.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set policies (``always``, ``partial``, ``never``) for each user repository individually. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.

* **Example**: ``- { url: ""https://download.docker.com/linux/centos/9/aarch64/stable"", gpgkey: ""https://download.docker.com/linux/centos/gpg"", name: ""docker-ce-repo"", sslcacert: """", sslclientkey: """", sslclientcert: """", policy: """" }``

.. note:: All SSL related certificates must be kept in ``/opt/omnia/user-repo-certs/<user_repo_name>``. The certificate files are encrypted post ``local_repo.yml`` playbook execution. Execute the ``ansible-vault decrypt <certificate_file> --vault-password-file /opt/omnia/input/project_default/.local_repo_credentials_key`` command to decrypt the files. "
**user_registry**,Optional,"* **Type**: JSON list
* This variable accepts the URL and port of the user's own software image registry. 
* If you have your own registry and want Omnia to use it, you can specify its URL and port using this variable. If the package is available there, Omnia will pull the image from the ``user_registry`` instead of the Internet.
* Compute nodes can directly mirror images from the URLs listed in the ``user_registry``, using ``http_proxy``.
* **Format**: ``- { host: <registry URL or hostname>, cert_path: ""<certificate path>"" , key_path: """", name: """", requires_auth: <true or false>}``

    * ``host``: The registry URL/hostname (for example, ``10.11.0.100`` or ``abcd.dev.test``).
    * ``cert_path``: Absolute path to the CA certificate file for the registry. If kept blank, the registry is treated as insecure.
    * ``key_path``: Path to the client key file, if required by the registry.
    * ``name``: A unique identifier for the registry.
    * ``requires_auth``: Set to ``true`` if the registry requires authentication with username or password, otherwise set to ``false``.

* **Example**: ::

              user_registry:
                       - { host: 10.11.0.100, cert_path: ""/home/ca.crt"", key_path: """", name: ""local"", requires_auth: true }
                       - { host: hostname.registry.test, cert_path: """", key_path: """", name: ""external"", requires_auth: false }

* If the ``user_registry`` requires authentication, then set ``requires_auth`` to true and update the ``/opt/omnia/input/project_default/user_registry_credential.yml`` file with the necessary details and credentials.

    * ``name``: User registry name, name should match exact name provided in ``local_repo_config.yml``.
    * ``username``: Provide if user registry requires username to authenticate.
    * ``password``: Provide if user registry requires password to authenticate.
    * **Format**: ::

                      user_registry_credential:
                             - {name: """", username: """", password: """"}

.. note:: The ``user_registry_credential.yml`` file  will get encrypted once ``local_repo.yml`` playbook has been executed. To edit or modify any fields, use the following command: 
     
      ::
              
                     ansible-vault edit user_registry_credential.yml --vault-password-file .local_repo_credentials_key"
**rhel_os_url_x86_64**,Mandatory,"* **Type**: string
* Mandatory when ``cluster_os_type`` is ``rhel`` in ``/opt/omnia/input/project_default/software_config.json``.
* Only CodeReady Linux Builder (crb_x86_64) repository URLs are supported. This repository contains additional packages for the RHEL OS, generally used by developers.
* Additional packages required for the cluster are downloaded from the provided ``rhel_os_url`` and stored in the Pulp container.
* ``url`` defines the baseurl for the repository where the OS package is hosted.
* ``gpgkey`` defines the x86_64_gpgkey for the repository. If ``gpgkey`` is omitted, then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the OS package.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set  an individual policy (``always``, ``partial``, ``never``) for the ``rhel_os_url``. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.
* **Example**: If ``cluster_os_type`` is rhel, ``rhel_os_url`` might be ``- {url: ""http://crb.com/CRB/x86_64/os/"", gpgkey: ""http://crb.com/CRB/x86_64/os/RPM-GPG-KEY"", name: """", policy: """"}``

.. note:: The ``rhel_os_url`` is configured via proxy in compute nodes.

.. caution:: Omnia does not support adding a Red Hat subscription URL to the ``rhel_os_url`` parameter. Adding it results in an error during ``local_repo.yml`` playbook execution. For more information, `click here <../../../Troubleshooting/KnownIssues/RHEL/local_repo.html>`_."
**rhel_os_url_aarch64**,Mandatory,"* **Type**: string
* Mandatory when ``cluster_os_type`` is ``rhel`` in ``/opt/omnia/input/project_default/software_config.json``.
* Only CodeReady Linux Builder (crb_aarch64) repository URLs are supported. This repository contains additional packages for the RHEL OS, generally used by developers.
* Additional packages required for the cluster are downloaded from the provided ``rhel_os_url`` and stored in the Pulp container.
* ``url`` defines the baseurl for the repository where the OS package is hosted.
* ``gpgkey`` defines the aarch64_gpgkey for the repository. If ``gpgkey`` is omitted, then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the OS package.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set  an individual policy (``always``, ``partial``, ``never``) for the ``rhel_os_url``. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.
* **Example**: If ``cluster_os_type`` is rhel, ``rhel_os_url`` might be ``- {url: ""http://crb.com/CRB/aarch64/os/"", gpgkey: ""http://crb.com/CRB/aarch64/os/RPM-GPG-KEY"", name: """", policy: """"}``

.. note:: The ``rhel_os_url`` is configured via proxy in compute nodes.

.. caution:: Omnia does not support adding a Red Hat subscription URL to the ``rhel_os_url`` parameter. Adding it results in an error during ``local_repo.yml`` playbook execution. For more information, `click here <../../../Troubleshooting/KnownIssues/RHEL/local_repo.html>`_."
**omnia_repo_url_rhel_x86_64**,Mandatory,"* **Type**: JSON list
* This variable accepts a list of all the x86_64 repo urls from where ``.rpm`` packages will be downloaded for RHEL clusters.
* ``url`` defines the baseurl for the repository where the package is hosted.
* ``gpgkey`` defines the gpgkey for the repository. If ``gpgkey`` is omitted, then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the software ``.rpm`` package.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set individual policies (``always``, ``partial``, ``never``) for the repository URLs. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.
* **Default value**: 
    - { url: ""https://download.docker.com/linux/centos/10/x86_64/stable/"", gpgkey: ""https://download.docker.com/linux/centos/gpg"", name: ""docker-ce-repo""}
    - { url: ""https://dl.fedoraproject.org/pub/epel/10/Everything/x86_64/"", gpgkey: ""https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9"", name: ""epel""}
    - { url: ""https://yum.repos.intel.com/oneapi/"", gpgkey: ""https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB"", name: ""oneapi""}
    - { url: ""https://nvidia.github.io/libnvidia-container/stable/rpm/x86_64/"", gpgkey: ""https://nvidia.github.io/libnvidia-container/gpgkey"", name: ""nvidia-repo""}
.. note::
      * These inputs are not validated by Omnia. Incorrect values provided to this variable can lead to unexpected failures during Omnia's deployment.
      * Ensure that all the listed URLs are reachable from the OIM."
**omnia_repo_url_rhel_aarch64**,Mandatory,"* **Type**: JSON list
* This variable accepts a list of all the aarch64 repo urls from where ``.rpm`` packages will be downloaded for RHEL clusters.
* ``url`` defines the baseurl for the repository where the package is hosted.
* ``gpgkey`` defines the gpgkey for the repository. If ``gpgkey`` is omitted, then ``gpgcheck=0`` is set for that repository.
* ``name`` defines the name of the software ``.rpm`` package.
* Irrespective of the value set to ``repo_config`` in ``/opt/omnia/input/project_default/software_config.json``, you can set individual policies (``always``, ``partial``, ``never``) for the repository URLs. To do so, add the ``policy`` key and provide the desired value while providing the repository URLs.
* **Default value**: 
    - { url: ""https://download.docker.com/linux/centos/10/aarch64/stable/"", gpgkey: ""https://download.docker.com/linux/centos/gpg"", name: ""docker-ce""}
    - { url: ""https://dl.fedoraproject.org/pub/epel/10/Everything/aarch64/"", gpgkey: ""https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9"", name: ""epel""}
    - { url: ""https://nvidia.github.io/libnvidia-container/stable/rpm/aarch64/"", gpgkey: ""https://nvidia.github.io/libnvidia-container/gpgkey"", name: ""nvidia-repo""}

.. note::
      * These inputs are not validated by Omnia. Incorrect values provided to this variable can lead to unexpected failures during Omnia's deployment.
      * Ensure that all the listed URLs are reachable from the OIM."
**enable_routed_internet**,Mandatory,"* **Type**: boolean
* When ``enable_routed_internet`` is set to true, a Squid container is deployed on the OIM to act as a proxy, enabling clusters with limited or no direct internet access to download packages from the Internet.
* It is recommended to set ``enable_routed_internet`` to ``false`` if the cluster has direct internet access.
* **Accepted values**: ``true`` or ``false``
* **Default value**: ``true``"
